import Risc0.Map
import Risc0.MlirTactics
import Risc0.Optimisation
import Risc0.Gadgets.computeDecode.Constraints.Code

namespace Risc0.computeDecode.Constraints.Code

open MLIRNotation

def opt1 : MLIRProgram :=
  "%1" ←ₐ .Const 2; "%2" ←ₐ .Const 3; "%3" ←ₐ .Const 4; "%4" ←ₐ .Const 128; "%5" ←ₐ .Const 16; "%6" ←ₐ .Const 8; "%7" ←ₐ .Const 64; "%8" ←ₐ ⊤; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour1 :
  getReturn (full.runProgram st)  =
  getReturn (opt1.runProgram st)  := by
    unfold getReturn MLIR.runProgram full
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (const_past_andEqz (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (const_past_andEqz (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (const_past_andEqz (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt1
    simp only

def opt2 : MLIRProgram :=
  "%2" ←ₐ .Const 3; "%3" ←ₐ .Const 4; "%4" ←ₐ .Const 128; "%5" ←ₐ .Const 16; "%6" ←ₐ .Const 8; "%7" ←ₐ .Const 64; "%8" ←ₐ ⊤; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour2 :
  getReturn (full.runProgram st)  =
  getReturn (opt2.runProgram st)  := by
    rewrite [optimised_behaviour1]
    unfold getReturn MLIR.runProgram opt1
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt2
    simp only

def opt3 : MLIRProgram :=
  "%3" ←ₐ .Const 4; "%4" ←ₐ .Const 128; "%5" ←ₐ .Const 16; "%6" ←ₐ .Const 8; "%7" ←ₐ .Const 64; "%8" ←ₐ ⊤; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour3 :
  getReturn (full.runProgram st)  =
  getReturn (opt3.runProgram st)  := by
    rewrite [optimised_behaviour2]
    unfold getReturn MLIR.runProgram opt2
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (const_past_andEqz (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt3
    simp only

def opt4 : MLIRProgram :=
  "%4" ←ₐ .Const 128; "%5" ←ₐ .Const 16; "%6" ←ₐ .Const 8; "%7" ←ₐ .Const 64; "%8" ←ₐ ⊤; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%3" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour4 :
  getReturn (full.runProgram st)  =
  getReturn (opt4.runProgram st)  := by
    rewrite [optimised_behaviour3]
    unfold getReturn MLIR.runProgram opt3
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt4
    simp only

def opt5 : MLIRProgram :=
  "%5" ←ₐ .Const 16; "%6" ←ₐ .Const 8; "%7" ←ₐ .Const 64; "%8" ←ₐ ⊤; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%3" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour5 :
  getReturn (full.runProgram st)  =
  getReturn (opt5.runProgram st)  := by
    rewrite [optimised_behaviour4]
    unfold getReturn MLIR.runProgram opt4
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (const_past_andEqz (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (const_past_andEqz (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt5
    simp only

def opt6 : MLIRProgram :=
  "%6" ←ₐ .Const 8; "%7" ←ₐ .Const 64; "%8" ←ₐ ⊤; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%3" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%5" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour6 :
  getReturn (full.runProgram st)  =
  getReturn (opt6.runProgram st)  := by
    rewrite [optimised_behaviour5]
    unfold getReturn MLIR.runProgram opt5
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt6
    simp only

def opt7 : MLIRProgram :=
  "%7" ←ₐ .Const 64; "%8" ←ₐ ⊤; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%3" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%6" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%5" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour7 :
  getReturn (full.runProgram st)  =
  getReturn (opt7.runProgram st)  := by
    rewrite [optimised_behaviour6]
    unfold getReturn MLIR.runProgram opt6
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt7
    simp only

def opt8 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%3" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%6" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%5" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%7" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour8 :
  getReturn (full.runProgram st)  =
  getReturn (opt8.runProgram st)  := by
    rewrite [optimised_behaviour7]
    unfold getReturn MLIR.runProgram opt7
    rewrite[opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt8
    simp only

def opt9 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%3" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%6" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%5" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%7" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour9 :
  getReturn (full.runProgram st)  =
  getReturn (opt9.runProgram st)  := by
    rewrite [optimised_behaviour8]
    unfold getReturn MLIR.runProgram opt8
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt9
    simp only

def opt10 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%3" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%6" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%5" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%7" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour10 :
  getReturn (full.runProgram st)  =
  getReturn (opt10.runProgram st)  := by
    rewrite [optimised_behaviour9]
    unfold getReturn MLIR.runProgram opt9
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt10
    simp only

def opt11 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%3" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%6" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%5" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%7" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour11 :
  getReturn (full.runProgram st)  =
  getReturn (opt11.runProgram st)  := by
    rewrite [optimised_behaviour10]
    unfold getReturn MLIR.runProgram opt10
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def]
    unfold opt11
    simp only

def opt12 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%3" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%6" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%5" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%7" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour12 :
  getReturn (full.runProgram st)  =
  getReturn (opt12.runProgram st)  := by
    rewrite [optimised_behaviour11]
    unfold getReturn MLIR.runProgram opt11
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt12
    simp only

def opt13 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%3" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%6" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%5" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%7" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour13 :
  getReturn (full.runProgram st)  =
  getReturn (opt13.runProgram st)  := by
    rewrite [optimised_behaviour12]
    unfold getReturn MLIR.runProgram opt12
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt13
    simp only

def opt14 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%3" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%6" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%5" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%7" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour14 :
  getReturn (full.runProgram st)  =
  getReturn (opt14.runProgram st)  := by
    rewrite [optimised_behaviour13]
    unfold getReturn MLIR.runProgram opt13
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt14
    simp only

def opt15 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%3" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%6" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%5" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%7" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour15 :
  getReturn (full.runProgram st)  =
  getReturn (opt15.runProgram st)  := by
    rewrite [optimised_behaviour14]
    unfold getReturn MLIR.runProgram opt14
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt15
    simp only

def opt16 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%3" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%6" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%5" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%7" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour16 :
  getReturn (full.runProgram st)  =
  getReturn (opt16.runProgram st)  := by
    rewrite [optimised_behaviour15]
    unfold getReturn MLIR.runProgram opt15
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt16
    simp only

def opt17 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%3" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%6" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%5" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%7" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour17 :
  getReturn (full.runProgram st)  =
  getReturn (opt17.runProgram st)  := by
    rewrite [optimised_behaviour16]
    unfold getReturn MLIR.runProgram opt16
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt17
    simp only

def opt18 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%3" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%6" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%5" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%7" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour18 :
  getReturn (full.runProgram st)  =
  getReturn (opt18.runProgram st)  := by
    rewrite [optimised_behaviour17]
    unfold getReturn MLIR.runProgram opt17
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt18
    simp only

def opt19 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%3" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%6" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%5" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%7" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%4" ←ₐ .Const 128; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour19 :
  getReturn (full.runProgram st)  =
  getReturn (opt19.runProgram st)  := by
    rewrite [optimised_behaviour18]
    unfold getReturn MLIR.runProgram opt18
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt19
    simp only

def opt20 : MLIRProgram :=
  "%8" ←ₐ ⊤; "%3" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%3"⟩; "%6" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%6"⟩; "%5" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%5"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%7" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%7"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%3"⟩ ⟨"%24"⟩; "%26" ←ₐ ⟨"%8"⟩ &₀ ⟨"%25"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 2; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%1"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 12; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%6"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%32"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 11; "%36" ←ₐ .Add ⟨"%35"⟩ ⟨"%30"⟩; "%37" ←ₐ .Mul ⟨"%36"⟩ ⟨"%5"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%29"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 3; "%39" ←ₐ .Add ⟨"%38"⟩ ⟨"%27"⟩; "%2" ←ₐ .Const 3; "%40" ←ₐ .Sub ⟨"%2"⟩ ⟨"%39"⟩; "%41" ←ₐ ⟨"%26"⟩ &₀ ⟨"%40"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 7; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%3"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 15; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%3"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Add ⟨"%47"⟩ ⟨"%45"⟩; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%5"⟩; "%4" ←ₐ .Const 128; "%50" ←ₐ .Get ⟨"data"⟩ 0 14; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%4"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%49"⟩; "%53" ←ₐ .Add ⟨"%52"⟩ ⟨"%44"⟩; "%42" ←ₐ .Get ⟨"data"⟩ 0 6; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%42"⟩; "%55" ←ₐ .Sub ⟨"%1"⟩ ⟨"%54"⟩; "%56" ←ₐ ⟨"%41"⟩ &₀ ⟨"%55"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 16; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%4"⟩; "%57" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Add ⟨"%59"⟩ ⟨"%57"⟩; "%0" ←ₐ .Const 1; "%61" ←ₐ .Sub ⟨"%0"⟩ ⟨"%60"⟩; "%62" ←ₐ ⟨"%56"⟩ &₀ ⟨"%61"⟩
lemma optimised_behaviour20 :
  getReturn (full.runProgram st)  =
  getReturn (opt20.runProgram st)  := by
    rewrite [optimised_behaviour19]
    unfold getReturn MLIR.runProgram opt19
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt20
    simp only

def opt_full : MLIRProgram := opt20
lemma opt_full_def : opt_full = opt20 := rfl
lemma optimised_behaviour_full :
  getReturn (full.runProgram st)  =
  getReturn (opt_full.runProgram st)  := by
  rewrite [optimised_behaviour20]
  rw [opt_full]
end Risc0.computeDecode.Constraints.Code