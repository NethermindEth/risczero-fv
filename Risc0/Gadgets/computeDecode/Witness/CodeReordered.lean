import Risc0.Map
import Risc0.MlirTactics
import Risc0.Optimisation
import Risc0.Gadgets.computeDecode.Witness.Code

namespace Risc0.computeDecode.Witness.Code

open MLIRNotation

def opt1 : MLIRProgram :=
  "%1" ←ₐ .Const 8; "%2" ←ₐ .Const 16; "%3" ←ₐ .Const 0; "%4" ←ₐ .Const 128; "%5" ←ₐ .Const 4; "%6" ←ₐ .Const 3; "%7" ←ₐ .Const 2; "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour1 :
  getReturn (full.runProgram st) res =
  getReturn (opt1.runProgram st) res := by
    unfold getReturn MLIR.runProgram full
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_single (const_past_set (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt1
    simp only

def opt2 : MLIRProgram :=
  "%2" ←ₐ .Const 16; "%3" ←ₐ .Const 0; "%4" ←ₐ .Const 128; "%5" ←ₐ .Const 4; "%6" ←ₐ .Const 3; "%7" ←ₐ .Const 2; "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%1" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour2 :
  getReturn (full.runProgram st) res =
  getReturn (opt2.runProgram st) res := by
    rewrite [optimised_behaviour1]
    unfold getReturn MLIR.runProgram opt1
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_single (const_past_set (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt2
    simp only

def opt3 : MLIRProgram :=
  "%3" ←ₐ .Const 0; "%4" ←ₐ .Const 128; "%5" ←ₐ .Const 4; "%6" ←ₐ .Const 3; "%7" ←ₐ .Const 2; "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%1" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%2" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour3 :
  getReturn (full.runProgram st) res =
  getReturn (opt3.runProgram st) res := by
    rewrite [optimised_behaviour2]
    unfold getReturn MLIR.runProgram opt2
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_single (const_past_set (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt3
    simp only

def opt4 : MLIRProgram :=
  "%4" ←ₐ .Const 128; "%5" ←ₐ .Const 4; "%6" ←ₐ .Const 3; "%7" ←ₐ .Const 2; "%8" ←ₐ .Const 1; "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%1" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%2" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour4 :
  getReturn (full.runProgram st) res =
  getReturn (opt4.runProgram st) res := by
    rewrite [optimised_behaviour3]
    unfold getReturn MLIR.runProgram opt3
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt4
    simp only

def opt5 : MLIRProgram :=
  "%5" ←ₐ .Const 4; "%6" ←ₐ .Const 3; "%7" ←ₐ .Const 2; "%8" ←ₐ .Const 1; "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%1" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%2" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour5 :
  getReturn (full.runProgram st) res =
  getReturn (opt5.runProgram st) res := by
    rewrite [optimised_behaviour4]
    unfold getReturn MLIR.runProgram opt4
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_single (const_past_set (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (const_past_eqz (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (const_past_eqz (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt5
    simp only

def opt6 : MLIRProgram :=
  "%6" ←ₐ .Const 3; "%7" ←ₐ .Const 2; "%8" ←ₐ .Const 1; "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%5" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%1" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%2" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour6 :
  getReturn (full.runProgram st) res =
  getReturn (opt6.runProgram st) res := by
    rewrite [optimised_behaviour5]
    unfold getReturn MLIR.runProgram opt5
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_single (const_past_set (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt6
    simp only

def opt7 : MLIRProgram :=
  "%7" ←ₐ .Const 2; "%8" ←ₐ .Const 1; "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%5" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%1" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%2" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour7 :
  getReturn (full.runProgram st) res =
  getReturn (opt7.runProgram st) res := by
    rewrite [optimised_behaviour6]
    unfold getReturn MLIR.runProgram opt6
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt7
    simp only

def opt8 : MLIRProgram :=
  "%8" ←ₐ .Const 1; "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%5" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%1" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%2" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour8 :
  getReturn (full.runProgram st) res =
  getReturn (opt8.runProgram st) res := by
    rewrite [optimised_behaviour7]
    unfold getReturn MLIR.runProgram opt7
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt8
    simp only

def opt9 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%5" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%1" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%2" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour9 :
  getReturn (full.runProgram st) res =
  getReturn (opt9.runProgram st) res := by
    rewrite [optimised_behaviour8]
    unfold getReturn MLIR.runProgram opt8
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_single (const_past_set (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_single (const_past_set (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial)),opt_swap_nondet_seq (const_past_set (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt9
    simp only

def opt10 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%5" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%1" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%2" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour10 :
  getReturn (full.runProgram st) res =
  getReturn (opt10.runProgram st) res := by
    rewrite [optimised_behaviour9]
    unfold getReturn MLIR.runProgram opt9
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt10
    simp only

def opt11 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%5" ←ₐ .Const 4; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%1" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%2" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour11 :
  getReturn (full.runProgram st) res =
  getReturn (opt11.runProgram st) res := by
    rewrite [optimised_behaviour10]
    unfold getReturn MLIR.runProgram opt10
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt11
    simp only

def opt12 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%5" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%1" ←ₐ .Const 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%2" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour12 :
  getReturn (full.runProgram st) res =
  getReturn (opt12.runProgram st) res := by
    rewrite [optimised_behaviour11]
    unfold getReturn MLIR.runProgram opt11
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt12
    simp only

def opt13 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%5" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%1" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%2" ←ₐ .Const 16; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour13 :
  getReturn (full.runProgram st) res =
  getReturn (opt13.runProgram st) res := by
    rewrite [optimised_behaviour12]
    unfold getReturn MLIR.runProgram opt12
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt13
    simp only

def opt14 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%5" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%1" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%2" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%0" ←ₐ .Const 64; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour14 :
  getReturn (full.runProgram st) res =
  getReturn (opt14.runProgram st) res := by
    rewrite [optimised_behaviour13]
    unfold getReturn MLIR.runProgram opt13
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt14
    simp only

def opt15 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%5" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%1" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%2" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%0" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour15 :
  getReturn (full.runProgram st) res =
  getReturn (opt15.runProgram st) res := by
    rewrite [optimised_behaviour14]
    unfold getReturn MLIR.runProgram opt14
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt15
    simp only

def opt16 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%5" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%1" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%2" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%0" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour16 :
  getReturn (full.runProgram st) res =
  getReturn (opt16.runProgram st) res := by
    rewrite [optimised_behaviour15]
    unfold getReturn MLIR.runProgram opt15
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt16
    simp only

def opt17 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%5" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%1" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%2" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%0" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour17 :
  getReturn (full.runProgram st) res =
  getReturn (opt17.runProgram st) res := by
    rewrite [optimised_behaviour16]
    unfold getReturn MLIR.runProgram opt16
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt17
    simp only

def opt18 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%5" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%1" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%2" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%0" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour18 :
  getReturn (full.runProgram st) res =
  getReturn (opt18.runProgram st) res := by
    rewrite [optimised_behaviour17]
    unfold getReturn MLIR.runProgram opt17
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt18
    simp only

def opt19 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%5" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%1" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%2" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%0" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%4" ←ₐ .Const 128; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour19 :
  getReturn (full.runProgram st) res =
  getReturn (opt19.runProgram st) res := by
    rewrite [optimised_behaviour18]
    unfold getReturn MLIR.runProgram opt18
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt19
    simp only

def opt20 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%5" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%1" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%2" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%0" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%4" ←ₐ .Const 128; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour20 :
  getReturn (full.runProgram st) res =
  getReturn (opt20.runProgram st) res := by
    rewrite [optimised_behaviour19]
    unfold getReturn MLIR.runProgram opt19
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt20
    simp only

def opt21 : MLIRProgram :=
  "%3" ←ₐ .Const 0; nondet ( ⟨"data"⟩[10] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[1] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[9] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[8] ←ᵢ ⟨"%3"⟩ ); "%7" ←ₐ .Const 2; nondet ( ⟨"data"⟩[0] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[13] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[12] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[2] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[11] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[4] ←ᵢ ⟨"%3"⟩ ); "%6" ←ₐ .Const 3; nondet ( ⟨"data"⟩[3] ←ᵢ ⟨"%6"⟩; ⟨"data"⟩[14] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[15] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[5] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[7] ←ᵢ ⟨"%3"⟩; ⟨"data"⟩[6] ←ᵢ ⟨"%7"⟩; ⟨"data"⟩[16] ←ᵢ ⟨"%3"⟩ ); "%8" ←ₐ .Const 1; nondet ( ⟨"data"⟩[17] ←ᵢ ⟨"%8"⟩ ); "%5" ←ₐ .Const 4; "%11" ←ₐ .Get ⟨"data"⟩ 0 8; "%12" ←ₐ .Mul ⟨"%11"⟩ ⟨"%5"⟩; "%1" ←ₐ .Const 8; "%13" ←ₐ .Get ⟨"data"⟩ 0 9; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%1"⟩; "%2" ←ₐ .Const 16; "%15" ←ₐ .Get ⟨"data"⟩ 0 1; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Add ⟨"%16"⟩ ⟨"%14"⟩; "%18" ←ₐ .Add ⟨"%17"⟩ ⟨"%12"⟩; "%10" ←ₐ .Get ⟨"data"⟩ 0 0; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%10"⟩; "%0" ←ₐ .Const 64; "%20" ←ₐ .Get ⟨"data"⟩ 0 10; "%21" ←ₐ .Mul ⟨"%20"⟩ ⟨"%0"⟩; "%22" ←ₐ .Add ⟨"%21"⟩ ⟨"%19"⟩; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%7"⟩; "%9" ←ₐ .Get ⟨"data"⟩ 0 13; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%9"⟩; "%25" ←ₐ .Sub ⟨"%5"⟩ ⟨"%24"⟩; ?₀ ⟨"%25"⟩; "%27" ←ₐ .Get ⟨"data"⟩ 0 4; "%28" ←ₐ .Mul ⟨"%27"⟩ ⟨"%5"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 2; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%7"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 12; "%33" ←ₐ .Mul ⟨"%32"⟩ ⟨"%1"⟩; "%34" ←ₐ .Add ⟨"%33"⟩ ⟨"%31"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 11; "%35" ←ₐ .Add ⟨"%34"⟩ ⟨"%29"⟩; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%28"⟩; "%26" ←ₐ .Get ⟨"data"⟩ 0 3; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%26"⟩; "%39" ←ₐ .Sub ⟨"%6"⟩ ⟨"%38"⟩; ?₀ ⟨"%39"⟩; "%41" ←ₐ .Get ⟨"data"⟩ 0 7; "%42" ←ₐ .Mul ⟨"%41"⟩ ⟨"%5"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 15; "%45" ←ₐ .Mul ⟨"%44"⟩ ⟨"%5"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 5; "%46" ←ₐ .Add ⟨"%45"⟩ ⟨"%43"⟩; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%2"⟩; "%4" ←ₐ .Const 128; "%48" ←ₐ .Get ⟨"data"⟩ 0 14; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Add ⟨"%50"⟩ ⟨"%42"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 6; "%52" ←ₐ .Add ⟨"%51"⟩ ⟨"%40"⟩; "%53" ←ₐ .Sub ⟨"%7"⟩ ⟨"%52"⟩; ?₀ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 16; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%4"⟩; "%54" ←ₐ .Get ⟨"data"⟩ 0 17; "%57" ←ₐ .Add ⟨"%56"⟩ ⟨"%54"⟩; "%58" ←ₐ .Sub ⟨"%8"⟩ ⟨"%57"⟩; ?₀ ⟨"%58"⟩
lemma optimised_behaviour21 :
  getReturn (full.runProgram st) res =
  getReturn (opt21.runProgram st) res := by
    rewrite [optimised_behaviour20]
    unfold getReturn MLIR.runProgram opt20
    rewrite[MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,step_nondet,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def,←MLIR.run_seq_def,←step_nondet,←step_nondet,←step_nondet,←MLIR.run_seq_def]
    unfold opt21
    simp only

def opt_full : MLIRProgram := opt21
lemma opt_full_def : opt_full = opt21 := rfl
lemma optimised_behaviour_full :
  getReturn (full.runProgram st) res =
  getReturn (opt_full.runProgram st) res := by
  rewrite [optimised_behaviour21]
  rw [opt_full]
end Risc0.computeDecode.Witness.Code