import Risc0.Map
import Risc0.MlirTactics
import Risc0.Optimisation
import Risc0.Gadgets.ComputeDecode.Constraints.Code

namespace Risc0.ComputeDecode.Constraints.Code

open MLIRNotation

def opt1 : MLIRProgram :=
  "%1" ←ₐ .Const 16; "%2" ←ₐ .Const 8; "%3" ←ₐ .Const 2; "%4" ←ₐ .Const 4; "%5" ←ₐ .Const 64; "%6" ←ₐ ⊤; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour1 :
  getReturn (full.runProgram st) =
  getReturn (opt1.runProgram st) := by
    unfold getReturn MLIR.runProgram full
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (const_past_andEqz (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (const_past_andEqz (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt1
    with_reducible rfl

def opt2 : MLIRProgram :=
  "%2" ←ₐ .Const 8; "%3" ←ₐ .Const 2; "%4" ←ₐ .Const 4; "%5" ←ₐ .Const 64; "%6" ←ₐ ⊤; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour2 :
  getReturn (full.runProgram st) =
  getReturn (opt2.runProgram st) := by
    rewrite [optimised_behaviour1]
    unfold getReturn MLIR.runProgram opt1
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt2
    with_reducible rfl

def opt3 : MLIRProgram :=
  "%3" ←ₐ .Const 2; "%4" ←ₐ .Const 4; "%5" ←ₐ .Const 64; "%6" ←ₐ ⊤; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%2" ←ₐ .Const 8; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour3 :
  getReturn (full.runProgram st) =
  getReturn (opt3.runProgram st) := by
    rewrite [optimised_behaviour2]
    unfold getReturn MLIR.runProgram opt2
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt3
    with_reducible rfl

def opt4 : MLIRProgram :=
  "%4" ←ₐ .Const 4; "%5" ←ₐ .Const 64; "%6" ←ₐ ⊤; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%2" ←ₐ .Const 8; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour4 :
  getReturn (full.runProgram st) =
  getReturn (opt4.runProgram st) := by
    rewrite [optimised_behaviour3]
    unfold getReturn MLIR.runProgram opt3
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt4
    with_reducible rfl

def opt5 : MLIRProgram :=
  "%5" ←ₐ .Const 64; "%6" ←ₐ ⊤; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%4" ←ₐ .Const 4; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%2" ←ₐ .Const 8; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour5 :
  getReturn (full.runProgram st) =
  getReturn (opt5.runProgram st) := by
    rewrite [optimised_behaviour4]
    unfold getReturn MLIR.runProgram opt4
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt5
    with_reducible rfl

def opt6 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%4" ←ₐ .Const 4; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%2" ←ₐ .Const 8; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%5" ←ₐ .Const 64; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour6 :
  getReturn (full.runProgram st) =
  getReturn (opt6.runProgram st) := by
    rewrite [optimised_behaviour5]
    unfold getReturn MLIR.runProgram opt5
    rewrite[opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt6
    with_reducible rfl

def opt7 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%4" ←ₐ .Const 4; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%2" ←ₐ .Const 8; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%5" ←ₐ .Const 64; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour7 :
  getReturn (full.runProgram st) =
  getReturn (opt7.runProgram st) := by
    rewrite [optimised_behaviour6]
    unfold getReturn MLIR.runProgram opt6
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (get_past_andEqz (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (get_past_andEqz (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (get_past_andEqz (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt7
    with_reducible rfl

def opt8 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%4" ←ₐ .Const 4; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%2" ←ₐ .Const 8; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%5" ←ₐ .Const 64; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour8 :
  getReturn (full.runProgram st) =
  getReturn (opt8.runProgram st) := by
    rewrite [optimised_behaviour7]
    unfold getReturn MLIR.runProgram opt7
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (get_past_andEqz (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (get_past_andEqz (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt8
    with_reducible rfl

def opt9 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%4" ←ₐ .Const 4; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%2" ←ₐ .Const 8; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%5" ←ₐ .Const 64; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour9 :
  getReturn (full.runProgram st) =
  getReturn (opt9.runProgram st) := by
    rewrite [optimised_behaviour8]
    unfold getReturn MLIR.runProgram opt8
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (get_past_andEqz (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt9
    with_reducible rfl

def opt10 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%4" ←ₐ .Const 4; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%2" ←ₐ .Const 8; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%5" ←ₐ .Const 64; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour10 :
  getReturn (full.runProgram st) =
  getReturn (opt10.runProgram st) := by
    rewrite [optimised_behaviour9]
    unfold getReturn MLIR.runProgram opt9
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt10
    with_reducible rfl

def opt11 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%4" ←ₐ .Const 4; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%2" ←ₐ .Const 8; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%5" ←ₐ .Const 64; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour11 :
  getReturn (full.runProgram st) =
  getReturn (opt11.runProgram st) := by
    rewrite [optimised_behaviour10]
    unfold getReturn MLIR.runProgram opt10
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt11
    with_reducible rfl

def opt12 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%4" ←ₐ .Const 4; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%2" ←ₐ .Const 8; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%5" ←ₐ .Const 64; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour12 :
  getReturn (full.runProgram st) =
  getReturn (opt12.runProgram st) := by
    rewrite [optimised_behaviour11]
    unfold getReturn MLIR.runProgram opt11
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt12
    with_reducible rfl

def opt13 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%4" ←ₐ .Const 4; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%2" ←ₐ .Const 8; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%5" ←ₐ .Const 64; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour13 :
  getReturn (full.runProgram st) =
  getReturn (opt13.runProgram st) := by
    rewrite [optimised_behaviour12]
    unfold getReturn MLIR.runProgram opt12
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def]

    unfold opt13
    with_reducible rfl

def opt14 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%4" ←ₐ .Const 4; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%2" ←ₐ .Const 8; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%1" ←ₐ .Const 16; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%5" ←ₐ .Const 64; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour14 :
  getReturn (full.runProgram st) =
  getReturn (opt14.runProgram st) := by
    rewrite [optimised_behaviour13]
    unfold getReturn MLIR.runProgram opt13
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt14
    with_reducible rfl

def opt15 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%4" ←ₐ .Const 4; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%2" ←ₐ .Const 8; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%1" ←ₐ .Const 16; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%5" ←ₐ .Const 64; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour15 :
  getReturn (full.runProgram st) =
  getReturn (opt15.runProgram st) := by
    rewrite [optimised_behaviour14]
    unfold getReturn MLIR.runProgram opt14
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt15
    with_reducible rfl

def opt16 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%4" ←ₐ .Const 4; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%2" ←ₐ .Const 8; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%1" ←ₐ .Const 16; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%5" ←ₐ .Const 64; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour16 :
  getReturn (full.runProgram st) =
  getReturn (opt16.runProgram st) := by
    rewrite [optimised_behaviour15]
    unfold getReturn MLIR.runProgram opt15
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt16
    with_reducible rfl

def opt17 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%4" ←ₐ .Const 4; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%2" ←ₐ .Const 8; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%1" ←ₐ .Const 16; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%5" ←ₐ .Const 64; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour17 :
  getReturn (full.runProgram st) =
  getReturn (opt17.runProgram st) := by
    rewrite [optimised_behaviour16]
    unfold getReturn MLIR.runProgram opt16
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt17
    with_reducible rfl

def opt18 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%4" ←ₐ .Const 4; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%2" ←ₐ .Const 8; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%1" ←ₐ .Const 16; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%5" ←ₐ .Const 64; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour18 :
  getReturn (full.runProgram st) =
  getReturn (opt18.runProgram st) := by
    rewrite [optimised_behaviour17]
    unfold getReturn MLIR.runProgram opt17
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt18
    with_reducible rfl

def opt19 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%4" ←ₐ .Const 4; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%2" ←ₐ .Const 8; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%1" ←ₐ .Const 16; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%5" ←ₐ .Const 64; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour19 :
  getReturn (full.runProgram st) =
  getReturn (opt19.runProgram st) := by
    rewrite [optimised_behaviour18]
    unfold getReturn MLIR.runProgram opt18
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt19
    with_reducible rfl

def opt20 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%4" ←ₐ .Const 4; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%2" ←ₐ .Const 8; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%1" ←ₐ .Const 16; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%5" ←ₐ .Const 64; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%0" ←ₐ .Const 128; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour20 :
  getReturn (full.runProgram st) =
  getReturn (opt20.runProgram st) := by
    rewrite [optimised_behaviour19]
    unfold getReturn MLIR.runProgram opt19
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt20
    with_reducible rfl

def opt21 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%4" ←ₐ .Const 4; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%2" ←ₐ .Const 8; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%1" ←ₐ .Const 16; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%5" ←ₐ .Const 64; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%0" ←ₐ .Const 128; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour21 :
  getReturn (full.runProgram st) =
  getReturn (opt21.runProgram st) := by
    rewrite [optimised_behaviour20]
    unfold getReturn MLIR.runProgram opt20
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt21
    with_reducible rfl

def opt22 : MLIRProgram :=
  "%6" ←ₐ ⊤; "%4" ←ₐ .Const 4; "%13" ←ₐ .Get ⟨"data"⟩ 0 8; "%14" ←ₐ .Mul ⟨"%13"⟩ ⟨"%4"⟩; "%2" ←ₐ .Const 8; "%15" ←ₐ .Get ⟨"data"⟩ 0 9; "%16" ←ₐ .Mul ⟨"%15"⟩ ⟨"%2"⟩; "%1" ←ₐ .Const 16; "%17" ←ₐ .Get ⟨"data"⟩ 0 1; "%18" ←ₐ .Mul ⟨"%17"⟩ ⟨"%1"⟩; "%19" ←ₐ .Add ⟨"%18"⟩ ⟨"%16"⟩; "%20" ←ₐ .Add ⟨"%19"⟩ ⟨"%14"⟩; "%12" ←ₐ .Get ⟨"data"⟩ 0 0; "%21" ←ₐ .Add ⟨"%20"⟩ ⟨"%12"⟩; "%5" ←ₐ .Const 64; "%22" ←ₐ .Get ⟨"data"⟩ 0 10; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%5"⟩; "%24" ←ₐ .Add ⟨"%23"⟩ ⟨"%21"⟩; "%3" ←ₐ .Const 2; "%25" ←ₐ .Mul ⟨"%24"⟩ ⟨"%3"⟩; "%11" ←ₐ .Get ⟨"data"⟩ 0 13; "%26" ←ₐ .Add ⟨"%25"⟩ ⟨"%11"⟩; "%10" ←ₐ .Get ⟨"in"⟩ 0 3; "%27" ←ₐ .Sub ⟨"%10"⟩ ⟨"%26"⟩; "%28" ←ₐ ⟨"%6"⟩ &₀ ⟨"%27"⟩; "%30" ←ₐ .Get ⟨"data"⟩ 0 4; "%31" ←ₐ .Mul ⟨"%30"⟩ ⟨"%4"⟩; "%33" ←ₐ .Get ⟨"data"⟩ 0 2; "%34" ←ₐ .Mul ⟨"%33"⟩ ⟨"%3"⟩; "%35" ←ₐ .Get ⟨"data"⟩ 0 12; "%36" ←ₐ .Mul ⟨"%35"⟩ ⟨"%2"⟩; "%37" ←ₐ .Add ⟨"%36"⟩ ⟨"%34"⟩; "%32" ←ₐ .Get ⟨"data"⟩ 0 11; "%38" ←ₐ .Add ⟨"%37"⟩ ⟨"%32"⟩; "%39" ←ₐ .Mul ⟨"%38"⟩ ⟨"%1"⟩; "%40" ←ₐ .Add ⟨"%39"⟩ ⟨"%31"⟩; "%29" ←ₐ .Get ⟨"data"⟩ 0 3; "%41" ←ₐ .Add ⟨"%40"⟩ ⟨"%29"⟩; "%9" ←ₐ .Get ⟨"in"⟩ 0 2; "%42" ←ₐ .Sub ⟨"%9"⟩ ⟨"%41"⟩; "%43" ←ₐ ⟨"%28"⟩ &₀ ⟨"%42"⟩; "%45" ←ₐ .Get ⟨"data"⟩ 0 7; "%46" ←ₐ .Mul ⟨"%45"⟩ ⟨"%4"⟩; "%48" ←ₐ .Get ⟨"data"⟩ 0 15; "%49" ←ₐ .Mul ⟨"%48"⟩ ⟨"%4"⟩; "%47" ←ₐ .Get ⟨"data"⟩ 0 5; "%50" ←ₐ .Add ⟨"%49"⟩ ⟨"%47"⟩; "%51" ←ₐ .Mul ⟨"%50"⟩ ⟨"%1"⟩; "%0" ←ₐ .Const 128; "%52" ←ₐ .Get ⟨"data"⟩ 0 14; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%0"⟩; "%54" ←ₐ .Add ⟨"%53"⟩ ⟨"%51"⟩; "%55" ←ₐ .Add ⟨"%54"⟩ ⟨"%46"⟩; "%44" ←ₐ .Get ⟨"data"⟩ 0 6; "%56" ←ₐ .Add ⟨"%55"⟩ ⟨"%44"⟩; "%8" ←ₐ .Get ⟨"in"⟩ 0 1; "%57" ←ₐ .Sub ⟨"%8"⟩ ⟨"%56"⟩; "%58" ←ₐ ⟨"%43"⟩ &₀ ⟨"%57"⟩; "%60" ←ₐ .Get ⟨"data"⟩ 0 16; "%61" ←ₐ .Mul ⟨"%60"⟩ ⟨"%0"⟩; "%59" ←ₐ .Get ⟨"data"⟩ 0 17; "%62" ←ₐ .Add ⟨"%61"⟩ ⟨"%59"⟩; "%7" ←ₐ .Get ⟨"in"⟩ 0 0; "%63" ←ₐ .Sub ⟨"%7"⟩ ⟨"%62"⟩; "%64" ←ₐ ⟨"%58"⟩ &₀ ⟨"%63"⟩
lemma optimised_behaviour22 :
  getReturn (full.runProgram st) =
  getReturn (opt22.runProgram st) := by
    rewrite [optimised_behaviour21]
    unfold getReturn MLIR.runProgram opt21
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial))]
    simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]

    unfold opt22
    with_reducible rfl

def opt_full : MLIRProgram := opt22
lemma opt_full_def : opt_full = opt22 := rfl
lemma optimised_behaviour_full :
  getReturn (full.runProgram st) =
  getReturn (opt_full.runProgram st) := by
  rewrite [optimised_behaviour22]
  rw [opt_full]
end Risc0.ComputeDecode.Constraints.Code