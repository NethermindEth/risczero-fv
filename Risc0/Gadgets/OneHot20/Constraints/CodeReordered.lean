import Risc0.Map
import Risc0.MlirTactics
import Risc0.Optimisation
import Risc0.Gadgets.OneHot20.Constraints.Code

namespace Risc0.OneHot20.Constraints.Code

open MLIRNotation

def opt1 : MLIRProgram :=
  "%1" ←ₐ .Const 2; "%2" ←ₐ .Const 3; "%3" ←ₐ .Const 4; "%4" ←ₐ .Const 5; "%5" ←ₐ .Const 6; "%6" ←ₐ .Const 7; "%7" ←ₐ .Const 8; "%8" ←ₐ .Const 9; "%9" ←ₐ .Const 10; "%10" ←ₐ .Const 11; "%11" ←ₐ .Const 12; "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour1 :
  getReturn (full.runProgram st)  =
  getReturn (opt1.runProgram st)  := by
    unfold getReturn MLIR.runProgram full
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_sub (by trivial) (by trivial) (by trivial)),opt_swap (const_past_andEqz (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt1
    simp only

def opt2 : MLIRProgram :=
  "%2" ←ₐ .Const 3; "%3" ←ₐ .Const 4; "%4" ←ₐ .Const 5; "%5" ←ₐ .Const 6; "%6" ←ₐ .Const 7; "%7" ←ₐ .Const 8; "%8" ←ₐ .Const 9; "%9" ←ₐ .Const 10; "%10" ←ₐ .Const 11; "%11" ←ₐ .Const 12; "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour2 :
  getReturn (full.runProgram st)  =
  getReturn (opt2.runProgram st)  := by
    rewrite [optimised_behaviour1]
    unfold getReturn MLIR.runProgram opt1
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt2
    simp only

def opt3 : MLIRProgram :=
  "%3" ←ₐ .Const 4; "%4" ←ₐ .Const 5; "%5" ←ₐ .Const 6; "%6" ←ₐ .Const 7; "%7" ←ₐ .Const 8; "%8" ←ₐ .Const 9; "%9" ←ₐ .Const 10; "%10" ←ₐ .Const 11; "%11" ←ₐ .Const 12; "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour3 :
  getReturn (full.runProgram st)  =
  getReturn (opt3.runProgram st)  := by
    rewrite [optimised_behaviour2]
    unfold getReturn MLIR.runProgram opt2
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt3
    simp only

def opt4 : MLIRProgram :=
  "%4" ←ₐ .Const 5; "%5" ←ₐ .Const 6; "%6" ←ₐ .Const 7; "%7" ←ₐ .Const 8; "%8" ←ₐ .Const 9; "%9" ←ₐ .Const 10; "%10" ←ₐ .Const 11; "%11" ←ₐ .Const 12; "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour4 :
  getReturn (full.runProgram st)  =
  getReturn (opt4.runProgram st)  := by
    rewrite [optimised_behaviour3]
    unfold getReturn MLIR.runProgram opt3
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt4
    simp only

def opt5 : MLIRProgram :=
  "%5" ←ₐ .Const 6; "%6" ←ₐ .Const 7; "%7" ←ₐ .Const 8; "%8" ←ₐ .Const 9; "%9" ←ₐ .Const 10; "%10" ←ₐ .Const 11; "%11" ←ₐ .Const 12; "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour5 :
  getReturn (full.runProgram st)  =
  getReturn (opt5.runProgram st)  := by
    rewrite [optimised_behaviour4]
    unfold getReturn MLIR.runProgram opt4
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt5
    simp only

def opt6 : MLIRProgram :=
  "%6" ←ₐ .Const 7; "%7" ←ₐ .Const 8; "%8" ←ₐ .Const 9; "%9" ←ₐ .Const 10; "%10" ←ₐ .Const 11; "%11" ←ₐ .Const 12; "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour6 :
  getReturn (full.runProgram st)  =
  getReturn (opt6.runProgram st)  := by
    rewrite [optimised_behaviour5]
    unfold getReturn MLIR.runProgram opt5
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt6
    simp only

def opt7 : MLIRProgram :=
  "%7" ←ₐ .Const 8; "%8" ←ₐ .Const 9; "%9" ←ₐ .Const 10; "%10" ←ₐ .Const 11; "%11" ←ₐ .Const 12; "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour7 :
  getReturn (full.runProgram st)  =
  getReturn (opt7.runProgram st)  := by
    rewrite [optimised_behaviour6]
    unfold getReturn MLIR.runProgram opt6
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt7
    simp only

def opt8 : MLIRProgram :=
  "%8" ←ₐ .Const 9; "%9" ←ₐ .Const 10; "%10" ←ₐ .Const 11; "%11" ←ₐ .Const 12; "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour8 :
  getReturn (full.runProgram st)  =
  getReturn (opt8.runProgram st)  := by
    rewrite [optimised_behaviour7]
    unfold getReturn MLIR.runProgram opt7
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt8
    simp only

def opt9 : MLIRProgram :=
  "%9" ←ₐ .Const 10; "%10" ←ₐ .Const 11; "%11" ←ₐ .Const 12; "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour9 :
  getReturn (full.runProgram st)  =
  getReturn (opt9.runProgram st)  := by
    rewrite [optimised_behaviour8]
    unfold getReturn MLIR.runProgram opt8
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt9
    simp only

def opt10 : MLIRProgram :=
  "%10" ←ₐ .Const 11; "%11" ←ₐ .Const 12; "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour10 :
  getReturn (full.runProgram st)  =
  getReturn (opt10.runProgram st)  := by
    rewrite [optimised_behaviour9]
    unfold getReturn MLIR.runProgram opt9
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt10
    simp only

def opt11 : MLIRProgram :=
  "%11" ←ₐ .Const 12; "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour11 :
  getReturn (full.runProgram st)  =
  getReturn (opt11.runProgram st)  := by
    rewrite [optimised_behaviour10]
    unfold getReturn MLIR.runProgram opt10
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt11
    simp only

def opt12 : MLIRProgram :=
  "%12" ←ₐ .Const 13; "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour12 :
  getReturn (full.runProgram st)  =
  getReturn (opt12.runProgram st)  := by
    rewrite [optimised_behaviour11]
    unfold getReturn MLIR.runProgram opt11
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt12
    simp only

def opt13 : MLIRProgram :=
  "%13" ←ₐ .Const 14; "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour13 :
  getReturn (full.runProgram st)  =
  getReturn (opt13.runProgram st)  := by
    rewrite [optimised_behaviour12]
    unfold getReturn MLIR.runProgram opt12
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt13
    simp only

def opt14 : MLIRProgram :=
  "%14" ←ₐ .Const 15; "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour14 :
  getReturn (full.runProgram st)  =
  getReturn (opt14.runProgram st)  := by
    rewrite [optimised_behaviour13]
    unfold getReturn MLIR.runProgram opt13
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt14
    simp only

def opt15 : MLIRProgram :=
  "%15" ←ₐ .Const 16; "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour15 :
  getReturn (full.runProgram st)  =
  getReturn (opt15.runProgram st)  := by
    rewrite [optimised_behaviour14]
    unfold getReturn MLIR.runProgram opt14
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt15
    simp only

def opt16 : MLIRProgram :=
  "%16" ←ₐ .Const 17; "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour16 :
  getReturn (full.runProgram st)  =
  getReturn (opt16.runProgram st)  := by
    rewrite [optimised_behaviour15]
    unfold getReturn MLIR.runProgram opt15
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt16
    simp only

def opt17 : MLIRProgram :=
  "%17" ←ₐ .Const 18; "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour17 :
  getReturn (full.runProgram st)  =
  getReturn (opt17.runProgram st)  := by
    rewrite [optimised_behaviour16]
    unfold getReturn MLIR.runProgram opt16
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt17
    simp only

def opt18 : MLIRProgram :=
  "%18" ←ₐ .Const 19; "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour18 :
  getReturn (full.runProgram st)  =
  getReturn (opt18.runProgram st)  := by
    rewrite [optimised_behaviour17]
    unfold getReturn MLIR.runProgram opt17
    rewrite[opt_swap (const_past_const (by trivial)),opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt18
    simp only

def opt19 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour19 :
  getReturn (full.runProgram st)  =
  getReturn (opt19.runProgram st)  := by
    rewrite [optimised_behaviour18]
    unfold getReturn MLIR.runProgram opt18
    rewrite[opt_swap (const_past_true (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial)),opt_swap (const_past_const (by trivial)),opt_swap (const_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (const_past_add (by trivial) (by trivial) (by trivial)),opt_swap (const_past_get (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt19
    simp only

def opt20 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour20 :
  getReturn (full.runProgram st)  =
  getReturn (opt20.runProgram st)  := by
    rewrite [optimised_behaviour19]
    unfold getReturn MLIR.runProgram opt19
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial)),opt_swap (get_past_get_buf (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial)),opt_swap (get_past_add (by trivial) (by trivial) (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt20
    simp only

def opt21 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%1" ←ₐ .Const 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour21 :
  getReturn (full.runProgram st)  =
  getReturn (opt21.runProgram st)  := by
    rewrite [optimised_behaviour20]
    unfold getReturn MLIR.runProgram opt20
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_get_offset (by trivial) (by trivial)),opt_swap (get_past_const (by trivial)),opt_swap (get_past_mul (by trivial) (by trivial) (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt21
    simp only

def opt22 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%2" ←ₐ .Const 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour22 :
  getReturn (full.runProgram st)  =
  getReturn (opt22.runProgram st)  := by
    rewrite [optimised_behaviour21]
    unfold getReturn MLIR.runProgram opt21
    rewrite[MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def]
    unfold opt22
    simp only

def opt23 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%3" ←ₐ .Const 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour23 :
  getReturn (full.runProgram st)  =
  getReturn (opt23.runProgram st)  := by
    rewrite [optimised_behaviour22]
    unfold getReturn MLIR.runProgram opt22
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt23
    simp only

def opt24 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%4" ←ₐ .Const 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour24 :
  getReturn (full.runProgram st)  =
  getReturn (opt24.runProgram st)  := by
    rewrite [optimised_behaviour23]
    unfold getReturn MLIR.runProgram opt23
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt24
    simp only

def opt25 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%5" ←ₐ .Const 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour25 :
  getReturn (full.runProgram st)  =
  getReturn (opt25.runProgram st)  := by
    rewrite [optimised_behaviour24]
    unfold getReturn MLIR.runProgram opt24
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt25
    simp only

def opt26 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%6" ←ₐ .Const 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour26 :
  getReturn (full.runProgram st)  =
  getReturn (opt26.runProgram st)  := by
    rewrite [optimised_behaviour25]
    unfold getReturn MLIR.runProgram opt25
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt26
    simp only

def opt27 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%7" ←ₐ .Const 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour27 :
  getReturn (full.runProgram st)  =
  getReturn (opt27.runProgram st)  := by
    rewrite [optimised_behaviour26]
    unfold getReturn MLIR.runProgram opt26
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt27
    simp only

def opt28 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%8" ←ₐ .Const 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour28 :
  getReturn (full.runProgram st)  =
  getReturn (opt28.runProgram st)  := by
    rewrite [optimised_behaviour27]
    unfold getReturn MLIR.runProgram opt27
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt28
    simp only

def opt29 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%9" ←ₐ .Const 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour29 :
  getReturn (full.runProgram st)  =
  getReturn (opt29.runProgram st)  := by
    rewrite [optimised_behaviour28]
    unfold getReturn MLIR.runProgram opt28
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt29
    simp only

def opt30 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%9" ←ₐ .Const 10; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%10" ←ₐ .Const 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour30 :
  getReturn (full.runProgram st)  =
  getReturn (opt30.runProgram st)  := by
    rewrite [optimised_behaviour29]
    unfold getReturn MLIR.runProgram opt29
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt30
    simp only

def opt31 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%9" ←ₐ .Const 10; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%10" ←ₐ .Const 11; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%11" ←ₐ .Const 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour31 :
  getReturn (full.runProgram st)  =
  getReturn (opt31.runProgram st)  := by
    rewrite [optimised_behaviour30]
    unfold getReturn MLIR.runProgram opt30
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt31
    simp only

def opt32 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%9" ←ₐ .Const 10; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%10" ←ₐ .Const 11; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%11" ←ₐ .Const 12; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%12" ←ₐ .Const 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour32 :
  getReturn (full.runProgram st)  =
  getReturn (opt32.runProgram st)  := by
    rewrite [optimised_behaviour31]
    unfold getReturn MLIR.runProgram opt31
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt32
    simp only

def opt33 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%9" ←ₐ .Const 10; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%10" ←ₐ .Const 11; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%11" ←ₐ .Const 12; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%12" ←ₐ .Const 13; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%13" ←ₐ .Const 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour33 :
  getReturn (full.runProgram st)  =
  getReturn (opt33.runProgram st)  := by
    rewrite [optimised_behaviour32]
    unfold getReturn MLIR.runProgram opt32
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt33
    simp only

def opt34 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%9" ←ₐ .Const 10; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%10" ←ₐ .Const 11; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%11" ←ₐ .Const 12; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%12" ←ₐ .Const 13; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%13" ←ₐ .Const 14; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%14" ←ₐ .Const 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour34 :
  getReturn (full.runProgram st)  =
  getReturn (opt34.runProgram st)  := by
    rewrite [optimised_behaviour33]
    unfold getReturn MLIR.runProgram opt33
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt34
    simp only

def opt35 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%9" ←ₐ .Const 10; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%10" ←ₐ .Const 11; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%11" ←ₐ .Const 12; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%12" ←ₐ .Const 13; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%13" ←ₐ .Const 14; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%14" ←ₐ .Const 15; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%15" ←ₐ .Const 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour35 :
  getReturn (full.runProgram st)  =
  getReturn (opt35.runProgram st)  := by
    rewrite [optimised_behaviour34]
    unfold getReturn MLIR.runProgram opt34
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt35
    simp only

def opt36 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%9" ←ₐ .Const 10; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%10" ←ₐ .Const 11; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%11" ←ₐ .Const 12; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%12" ←ₐ .Const 13; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%13" ←ₐ .Const 14; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%14" ←ₐ .Const 15; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%15" ←ₐ .Const 16; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%16" ←ₐ .Const 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour36 :
  getReturn (full.runProgram st)  =
  getReturn (opt36.runProgram st)  := by
    rewrite [optimised_behaviour35]
    unfold getReturn MLIR.runProgram opt35
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt36
    simp only

def opt37 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%9" ←ₐ .Const 10; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%10" ←ₐ .Const 11; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%11" ←ₐ .Const 12; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%12" ←ₐ .Const 13; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%13" ←ₐ .Const 14; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%14" ←ₐ .Const 15; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%15" ←ₐ .Const 16; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%16" ←ₐ .Const 17; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%17" ←ₐ .Const 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour37 :
  getReturn (full.runProgram st)  =
  getReturn (opt37.runProgram st)  := by
    rewrite [optimised_behaviour36]
    unfold getReturn MLIR.runProgram opt36
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt37
    simp only

def opt38 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%9" ←ₐ .Const 10; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%10" ←ₐ .Const 11; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%11" ←ₐ .Const 12; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%12" ←ₐ .Const 13; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%13" ←ₐ .Const 14; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%14" ←ₐ .Const 15; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%15" ←ₐ .Const 16; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%16" ←ₐ .Const 17; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%17" ←ₐ .Const 18; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%18" ←ₐ .Const 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour38 :
  getReturn (full.runProgram st)  =
  getReturn (opt38.runProgram st)  := by
    rewrite [optimised_behaviour37]
    unfold getReturn MLIR.runProgram opt37
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt38
    simp only

def opt39 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%9" ←ₐ .Const 10; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%10" ←ₐ .Const 11; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%11" ←ₐ .Const 12; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%12" ←ₐ .Const 13; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%13" ←ₐ .Const 14; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%14" ←ₐ .Const 15; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%15" ←ₐ .Const 16; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%16" ←ₐ .Const 17; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%17" ←ₐ .Const 18; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%18" ←ₐ .Const 19; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%0" ←ₐ .Const 1; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour39 :
  getReturn (full.runProgram st)  =
  getReturn (opt39.runProgram st)  := by
    rewrite [optimised_behaviour38]
    unfold getReturn MLIR.runProgram opt38
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt39
    simp only

def opt40 : MLIRProgram :=
  "%19" ←ₐ ⊤; "%1" ←ₐ .Const 2; "%22" ←ₐ .Get ⟨"data"⟩ 0 2; "%23" ←ₐ .Mul ⟨"%22"⟩ ⟨"%1"⟩; "%21" ←ₐ .Get ⟨"data"⟩ 0 1; "%24" ←ₐ .Add ⟨"%21"⟩ ⟨"%23"⟩; "%2" ←ₐ .Const 3; "%25" ←ₐ .Get ⟨"data"⟩ 0 3; "%26" ←ₐ .Mul ⟨"%25"⟩ ⟨"%2"⟩; "%27" ←ₐ .Add ⟨"%24"⟩ ⟨"%26"⟩; "%3" ←ₐ .Const 4; "%28" ←ₐ .Get ⟨"data"⟩ 0 4; "%29" ←ₐ .Mul ⟨"%28"⟩ ⟨"%3"⟩; "%30" ←ₐ .Add ⟨"%27"⟩ ⟨"%29"⟩; "%4" ←ₐ .Const 5; "%31" ←ₐ .Get ⟨"data"⟩ 0 5; "%32" ←ₐ .Mul ⟨"%31"⟩ ⟨"%4"⟩; "%33" ←ₐ .Add ⟨"%30"⟩ ⟨"%32"⟩; "%5" ←ₐ .Const 6; "%34" ←ₐ .Get ⟨"data"⟩ 0 6; "%35" ←ₐ .Mul ⟨"%34"⟩ ⟨"%5"⟩; "%36" ←ₐ .Add ⟨"%33"⟩ ⟨"%35"⟩; "%6" ←ₐ .Const 7; "%37" ←ₐ .Get ⟨"data"⟩ 0 7; "%38" ←ₐ .Mul ⟨"%37"⟩ ⟨"%6"⟩; "%39" ←ₐ .Add ⟨"%36"⟩ ⟨"%38"⟩; "%7" ←ₐ .Const 8; "%40" ←ₐ .Get ⟨"data"⟩ 0 8; "%41" ←ₐ .Mul ⟨"%40"⟩ ⟨"%7"⟩; "%42" ←ₐ .Add ⟨"%39"⟩ ⟨"%41"⟩; "%8" ←ₐ .Const 9; "%43" ←ₐ .Get ⟨"data"⟩ 0 9; "%44" ←ₐ .Mul ⟨"%43"⟩ ⟨"%8"⟩; "%45" ←ₐ .Add ⟨"%42"⟩ ⟨"%44"⟩; "%9" ←ₐ .Const 10; "%46" ←ₐ .Get ⟨"data"⟩ 0 10; "%47" ←ₐ .Mul ⟨"%46"⟩ ⟨"%9"⟩; "%48" ←ₐ .Add ⟨"%45"⟩ ⟨"%47"⟩; "%10" ←ₐ .Const 11; "%49" ←ₐ .Get ⟨"data"⟩ 0 11; "%50" ←ₐ .Mul ⟨"%49"⟩ ⟨"%10"⟩; "%51" ←ₐ .Add ⟨"%48"⟩ ⟨"%50"⟩; "%11" ←ₐ .Const 12; "%52" ←ₐ .Get ⟨"data"⟩ 0 12; "%53" ←ₐ .Mul ⟨"%52"⟩ ⟨"%11"⟩; "%54" ←ₐ .Add ⟨"%51"⟩ ⟨"%53"⟩; "%12" ←ₐ .Const 13; "%55" ←ₐ .Get ⟨"data"⟩ 0 13; "%56" ←ₐ .Mul ⟨"%55"⟩ ⟨"%12"⟩; "%57" ←ₐ .Add ⟨"%54"⟩ ⟨"%56"⟩; "%13" ←ₐ .Const 14; "%58" ←ₐ .Get ⟨"data"⟩ 0 14; "%59" ←ₐ .Mul ⟨"%58"⟩ ⟨"%13"⟩; "%60" ←ₐ .Add ⟨"%57"⟩ ⟨"%59"⟩; "%14" ←ₐ .Const 15; "%61" ←ₐ .Get ⟨"data"⟩ 0 15; "%62" ←ₐ .Mul ⟨"%61"⟩ ⟨"%14"⟩; "%63" ←ₐ .Add ⟨"%60"⟩ ⟨"%62"⟩; "%15" ←ₐ .Const 16; "%64" ←ₐ .Get ⟨"data"⟩ 0 16; "%65" ←ₐ .Mul ⟨"%64"⟩ ⟨"%15"⟩; "%66" ←ₐ .Add ⟨"%63"⟩ ⟨"%65"⟩; "%16" ←ₐ .Const 17; "%67" ←ₐ .Get ⟨"data"⟩ 0 17; "%68" ←ₐ .Mul ⟨"%67"⟩ ⟨"%16"⟩; "%69" ←ₐ .Add ⟨"%66"⟩ ⟨"%68"⟩; "%17" ←ₐ .Const 18; "%70" ←ₐ .Get ⟨"data"⟩ 0 18; "%71" ←ₐ .Mul ⟨"%70"⟩ ⟨"%17"⟩; "%72" ←ₐ .Add ⟨"%69"⟩ ⟨"%71"⟩; "%18" ←ₐ .Const 19; "%73" ←ₐ .Get ⟨"data"⟩ 0 19; "%74" ←ₐ .Mul ⟨"%73"⟩ ⟨"%18"⟩; "%75" ←ₐ .Add ⟨"%72"⟩ ⟨"%74"⟩; "%20" ←ₐ .Get ⟨"code"⟩ 0 0; "%76" ←ₐ .Sub ⟨"%75"⟩ ⟨"%20"⟩; "%77" ←ₐ ⟨"%19"⟩ &₀ ⟨"%76"⟩; "%0" ←ₐ .Const 1; "%78" ←ₐ .Get ⟨"data"⟩ 0 0; "%79" ←ₐ .Sub ⟨"%0"⟩ ⟨"%78"⟩; "%80" ←ₐ .Mul ⟨"%78"⟩ ⟨"%79"⟩; "%81" ←ₐ ⟨"%77"⟩ &₀ ⟨"%80"⟩; "%82" ←ₐ .Sub ⟨"%0"⟩ ⟨"%21"⟩; "%83" ←ₐ .Mul ⟨"%21"⟩ ⟨"%82"⟩; "%84" ←ₐ ⟨"%81"⟩ &₀ ⟨"%83"⟩; "%85" ←ₐ .Add ⟨"%78"⟩ ⟨"%21"⟩; "%86" ←ₐ .Sub ⟨"%0"⟩ ⟨"%22"⟩; "%87" ←ₐ .Mul ⟨"%22"⟩ ⟨"%86"⟩; "%88" ←ₐ ⟨"%84"⟩ &₀ ⟨"%87"⟩; "%89" ←ₐ .Add ⟨"%85"⟩ ⟨"%22"⟩; "%90" ←ₐ .Sub ⟨"%0"⟩ ⟨"%25"⟩; "%91" ←ₐ .Mul ⟨"%25"⟩ ⟨"%90"⟩; "%92" ←ₐ ⟨"%88"⟩ &₀ ⟨"%91"⟩; "%93" ←ₐ .Add ⟨"%89"⟩ ⟨"%25"⟩; "%94" ←ₐ .Sub ⟨"%0"⟩ ⟨"%28"⟩; "%95" ←ₐ .Mul ⟨"%28"⟩ ⟨"%94"⟩; "%96" ←ₐ ⟨"%92"⟩ &₀ ⟨"%95"⟩; "%97" ←ₐ .Add ⟨"%93"⟩ ⟨"%28"⟩; "%98" ←ₐ .Sub ⟨"%0"⟩ ⟨"%31"⟩; "%99" ←ₐ .Mul ⟨"%31"⟩ ⟨"%98"⟩; "%100" ←ₐ ⟨"%96"⟩ &₀ ⟨"%99"⟩; "%101" ←ₐ .Add ⟨"%97"⟩ ⟨"%31"⟩; "%102" ←ₐ .Sub ⟨"%0"⟩ ⟨"%34"⟩; "%103" ←ₐ .Mul ⟨"%34"⟩ ⟨"%102"⟩; "%104" ←ₐ ⟨"%100"⟩ &₀ ⟨"%103"⟩; "%105" ←ₐ .Add ⟨"%101"⟩ ⟨"%34"⟩; "%106" ←ₐ .Sub ⟨"%0"⟩ ⟨"%37"⟩; "%107" ←ₐ .Mul ⟨"%37"⟩ ⟨"%106"⟩; "%108" ←ₐ ⟨"%104"⟩ &₀ ⟨"%107"⟩; "%109" ←ₐ .Add ⟨"%105"⟩ ⟨"%37"⟩; "%110" ←ₐ .Sub ⟨"%0"⟩ ⟨"%40"⟩; "%111" ←ₐ .Mul ⟨"%40"⟩ ⟨"%110"⟩; "%112" ←ₐ ⟨"%108"⟩ &₀ ⟨"%111"⟩; "%113" ←ₐ .Add ⟨"%109"⟩ ⟨"%40"⟩; "%114" ←ₐ .Sub ⟨"%0"⟩ ⟨"%43"⟩; "%115" ←ₐ .Mul ⟨"%43"⟩ ⟨"%114"⟩; "%116" ←ₐ ⟨"%112"⟩ &₀ ⟨"%115"⟩; "%117" ←ₐ .Add ⟨"%113"⟩ ⟨"%43"⟩; "%118" ←ₐ .Sub ⟨"%0"⟩ ⟨"%46"⟩; "%119" ←ₐ .Mul ⟨"%46"⟩ ⟨"%118"⟩; "%120" ←ₐ ⟨"%116"⟩ &₀ ⟨"%119"⟩; "%121" ←ₐ .Add ⟨"%117"⟩ ⟨"%46"⟩; "%122" ←ₐ .Sub ⟨"%0"⟩ ⟨"%49"⟩; "%123" ←ₐ .Mul ⟨"%49"⟩ ⟨"%122"⟩; "%124" ←ₐ ⟨"%120"⟩ &₀ ⟨"%123"⟩; "%125" ←ₐ .Add ⟨"%121"⟩ ⟨"%49"⟩; "%126" ←ₐ .Sub ⟨"%0"⟩ ⟨"%52"⟩; "%127" ←ₐ .Mul ⟨"%52"⟩ ⟨"%126"⟩; "%128" ←ₐ ⟨"%124"⟩ &₀ ⟨"%127"⟩; "%129" ←ₐ .Add ⟨"%125"⟩ ⟨"%52"⟩; "%130" ←ₐ .Sub ⟨"%0"⟩ ⟨"%55"⟩; "%131" ←ₐ .Mul ⟨"%55"⟩ ⟨"%130"⟩; "%132" ←ₐ ⟨"%128"⟩ &₀ ⟨"%131"⟩; "%133" ←ₐ .Add ⟨"%129"⟩ ⟨"%55"⟩; "%134" ←ₐ .Sub ⟨"%0"⟩ ⟨"%58"⟩; "%135" ←ₐ .Mul ⟨"%58"⟩ ⟨"%134"⟩; "%136" ←ₐ ⟨"%132"⟩ &₀ ⟨"%135"⟩; "%137" ←ₐ .Add ⟨"%133"⟩ ⟨"%58"⟩; "%138" ←ₐ .Sub ⟨"%0"⟩ ⟨"%61"⟩; "%139" ←ₐ .Mul ⟨"%61"⟩ ⟨"%138"⟩; "%140" ←ₐ ⟨"%136"⟩ &₀ ⟨"%139"⟩; "%141" ←ₐ .Add ⟨"%137"⟩ ⟨"%61"⟩; "%142" ←ₐ .Sub ⟨"%0"⟩ ⟨"%64"⟩; "%143" ←ₐ .Mul ⟨"%64"⟩ ⟨"%142"⟩; "%144" ←ₐ ⟨"%140"⟩ &₀ ⟨"%143"⟩; "%145" ←ₐ .Add ⟨"%141"⟩ ⟨"%64"⟩; "%146" ←ₐ .Sub ⟨"%0"⟩ ⟨"%67"⟩; "%147" ←ₐ .Mul ⟨"%67"⟩ ⟨"%146"⟩; "%148" ←ₐ ⟨"%144"⟩ &₀ ⟨"%147"⟩; "%149" ←ₐ .Add ⟨"%145"⟩ ⟨"%67"⟩; "%150" ←ₐ .Sub ⟨"%0"⟩ ⟨"%70"⟩; "%151" ←ₐ .Mul ⟨"%70"⟩ ⟨"%150"⟩; "%152" ←ₐ ⟨"%148"⟩ &₀ ⟨"%151"⟩; "%153" ←ₐ .Add ⟨"%149"⟩ ⟨"%70"⟩; "%154" ←ₐ .Sub ⟨"%0"⟩ ⟨"%73"⟩; "%155" ←ₐ .Mul ⟨"%73"⟩ ⟨"%154"⟩; "%156" ←ₐ ⟨"%152"⟩ &₀ ⟨"%155"⟩; "%157" ←ₐ .Add ⟨"%153"⟩ ⟨"%73"⟩; "%158" ←ₐ .Sub ⟨"%157"⟩ ⟨"%0"⟩; "%159" ←ₐ ⟨"%156"⟩ &₀ ⟨"%158"⟩
lemma optimised_behaviour40 :
  getReturn (full.runProgram st)  =
  getReturn (opt40.runProgram st)  := by
    rewrite [optimised_behaviour39]
    unfold getReturn MLIR.runProgram opt39
    rewrite[MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def,MLIR.run_seq_def]
    rewrite[opt_swap (get_past_const (by trivial))]
    try simp only [←MLIR.run_nondet]
    rewrite [←MLIR.run_seq_def]
    rewrite[←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def,←MLIR.run_seq_def]
    unfold opt40
    simp only

def opt_full : MLIRProgram := opt40
lemma opt_full_def : opt_full = opt40 := rfl
lemma optimised_behaviour_full :
  getReturn (full.runProgram st)  =
  getReturn (opt_full.runProgram st)  := by
  rewrite [optimised_behaviour40]
  rw [opt_full]
end Risc0.OneHot20.Constraints.Code